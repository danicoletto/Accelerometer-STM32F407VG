
Acelerometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001704  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800188c  0800188c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800188c  0800188c  0001188c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001890  08001890  00011890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000068  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000006c  2000006c  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006131  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000012e6  00000000  00000000  00026165  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000638  00000000  00000000  00027450  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000580  00000000  00000000  00027a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002830  00000000  00000000  00028008  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002627  00000000  00000000  0002a838  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002ce5f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000018c0  00000000  00000000  0002cedc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002e79c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001874 	.word	0x08001874

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001874 	.word	0x08001874

080001c8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001d2:	2300      	movs	r3, #0
 80001d4:	617b      	str	r3, [r7, #20]
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
 80001e2:	e076      	b.n	80002d2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001e4:	2201      	movs	r2, #1
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	fa02 f303 	lsl.w	r3, r2, r3
 80001ec:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	693b      	ldr	r3, [r7, #16]
 80001f4:	4013      	ands	r3, r2
 80001f6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d165      	bne.n	80002cc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	2103      	movs	r1, #3
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	43db      	mvns	r3, r3
 8000210:	401a      	ands	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	4619      	mov	r1, r3
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
 8000228:	431a      	orrs	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d003      	beq.n	800023e <GPIO_Init+0x76>
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	791b      	ldrb	r3, [r3, #4]
 800023a:	2b02      	cmp	r3, #2
 800023c:	d12e      	bne.n	800029c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	689a      	ldr	r2, [r3, #8]
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	2103      	movs	r1, #3
 8000248:	fa01 f303 	lsl.w	r3, r1, r3
 800024c:	43db      	mvns	r3, r3
 800024e:	401a      	ands	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	689a      	ldr	r2, [r3, #8]
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	795b      	ldrb	r3, [r3, #5]
 800025c:	4619      	mov	r1, r3
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	685a      	ldr	r2, [r3, #4]
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	b29b      	uxth	r3, r3
 8000274:	4619      	mov	r1, r3
 8000276:	2301      	movs	r3, #1
 8000278:	408b      	lsls	r3, r1
 800027a:	43db      	mvns	r3, r3
 800027c:	401a      	ands	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	683a      	ldr	r2, [r7, #0]
 8000288:	7992      	ldrb	r2, [r2, #6]
 800028a:	4611      	mov	r1, r2
 800028c:	697a      	ldr	r2, [r7, #20]
 800028e:	b292      	uxth	r2, r2
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	b292      	uxth	r2, r2
 8000296:	431a      	orrs	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68da      	ldr	r2, [r3, #12]
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	2103      	movs	r1, #3
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	43db      	mvns	r3, r3
 80002ae:	401a      	ands	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	68da      	ldr	r2, [r3, #12]
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	79db      	ldrb	r3, [r3, #7]
 80002bc:	4619      	mov	r1, r3
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	431a      	orrs	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	3301      	adds	r3, #1
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	2b0f      	cmp	r3, #15
 80002d6:	d985      	bls.n	80001e4 <GPIO_Init+0x1c>
    }
  }
}
 80002d8:	bf00      	nop
 80002da:	371c      	adds	r7, #28
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d006      	beq.n	8000304 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80002f6:	490a      	ldr	r1, [pc, #40]	; (8000320 <RCC_AHB1PeriphClockCmd+0x3c>)
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <RCC_AHB1PeriphClockCmd+0x3c>)
 80002fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4313      	orrs	r3, r2
 8000300:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000302:	e006      	b.n	8000312 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000304:	4906      	ldr	r1, [pc, #24]	; (8000320 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	43db      	mvns	r3, r3
 800030e:	4013      	ands	r3, r2
 8000310:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800

08000324 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000338:	89fb      	ldrh	r3, [r7, #14]
 800033a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800033e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	881a      	ldrh	r2, [r3, #0]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	885b      	ldrh	r3, [r3, #2]
 8000348:	4313      	orrs	r3, r2
 800034a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000350:	4313      	orrs	r3, r2
 8000352:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000358:	4313      	orrs	r3, r2
 800035a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000360:	4313      	orrs	r3, r2
 8000362:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000368:	4313      	orrs	r3, r2
 800036a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000370:	4313      	orrs	r3, r2
 8000372:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000378:	4313      	orrs	r3, r2
 800037a:	b29a      	uxth	r2, r3
 800037c:	89fb      	ldrh	r3, [r7, #14]
 800037e:	4313      	orrs	r3, r2
 8000380:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	89fa      	ldrh	r2, [r7, #14]
 8000386:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	8b9b      	ldrh	r3, [r3, #28]
 800038c:	b29b      	uxth	r3, r3
 800038e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000392:	b29a      	uxth	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	8a1a      	ldrh	r2, [r3, #16]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	821a      	strh	r2, [r3, #16]
}
 80003a0:	bf00      	nop
 80003a2:	3714      	adds	r7, #20
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2200      	movs	r2, #0
 80003b8:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2200      	movs	r2, #0
 80003c4:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2200      	movs	r2, #0
 80003ca:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2200      	movs	r2, #0
 80003d0:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2200      	movs	r2, #0
 80003d6:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2200      	movs	r2, #0
 80003dc:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	2200      	movs	r2, #0
 80003e2:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2207      	movs	r2, #7
 80003e8:	821a      	strh	r2, [r3, #16]
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
	...

080003f8 <Delayms>:
 * @param  Delays for specific amount of milliseconds
 * @param  millis: Time in milliseconds for delay
 * @retval None
 * @note   Declared as static inline
 */
static __INLINE void Delayms(uint32_t millis) {
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	volatile uint32_t timer = TM_Time;
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <Delayms+0x50>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000406:	f3ef 8305 	mrs	r3, IPSR
 800040a:	60fb      	str	r3, [r7, #12]
  return(result);
 800040c:	68fb      	ldr	r3, [r7, #12]

	/* Called from thread */
	if (!__get_IPSR()) {
 800040e:	2b00      	cmp	r3, #0
 8000410:	d111      	bne.n	8000436 <Delayms+0x3e>
		/* Wait for timer to count milliseconds */
		while ((TM_Time - timer) < millis) {
 8000412:	bf00      	nop
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <Delayms+0x50>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	1ad2      	subs	r2, r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	429a      	cmp	r2, r3
 8000420:	d3f8      	bcc.n	8000414 <Delayms+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 8000422:	e00b      	b.n	800043c <Delayms+0x44>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <Delayms+0x54>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800042c:	2b00      	cmp	r3, #0
 800042e:	d002      	beq.n	8000436 <Delayms+0x3e>
				millis--;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3b01      	subs	r3, #1
 8000434:	607b      	str	r3, [r7, #4]
		while (millis) {
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d1f3      	bne.n	8000424 <Delayms+0x2c>
}
 800043c:	bf00      	nop
 800043e:	3714      	adds	r7, #20
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	20000020 	.word	0x20000020
 800044c:	e000e010 	.word	0xe000e010

08000450 <main>:
#include "tm_stm32f4_lis302dl_lis3dsh.h"

/* Accelerometer data structure */
TM_LIS302DL_LIS3DSH_t Axes_Data;

int main(void) {	
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	/* Initialize system */
	SystemInit();
 8000454:	f000 f8be 	bl	80005d4 <SystemInit>
	
	/* Init delay */
	TM_DELAY_Init();
 8000458:	f000 fa32 	bl	80008c0 <TM_DELAY_Init>
	
	/* Initialize LEDs */
	TM_DISCO_LedInit();
 800045c:	f000 fa58 	bl	8000910 <TM_DISCO_LedInit>
	
	/* Detect proper device */
	if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8000460:	f000 fbd0 	bl	8000c04 <TM_LIS302DL_LIS3DSH_Detect>
 8000464:	4603      	mov	r3, r0
 8000466:	2b01      	cmp	r3, #1
 8000468:	d108      	bne.n	800047c <main+0x2c>
		/* Turn on GREEN and RED */
		TM_DISCO_LedOn(LED_GREEN | LED_RED);
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <main+0xd8>)
 800046c:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000470:	831a      	strh	r2, [r3, #24]
		/* Initialize LIS302DL */
		TM_LIS302DL_LIS3DSH_Init(TM_LIS302DL_Sensitivity_2_3G, TM_LIS302DL_Filter_2Hz);
 8000472:	2104      	movs	r1, #4
 8000474:	2005      	movs	r0, #5
 8000476:	f000 fbe9 	bl	8000c4c <TM_LIS302DL_LIS3DSH_Init>
 800047a:	e012      	b.n	80004a2 <main+0x52>
	} else if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 800047c:	f000 fbc2 	bl	8000c04 <TM_LIS302DL_LIS3DSH_Detect>
 8000480:	4603      	mov	r3, r0
 8000482:	2b02      	cmp	r3, #2
 8000484:	d108      	bne.n	8000498 <main+0x48>
		/* Turn on BLUE and ORANGE */
		TM_DISCO_LedOn(LED_BLUE | LED_ORANGE);
 8000486:	4b28      	ldr	r3, [pc, #160]	; (8000528 <main+0xd8>)
 8000488:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800048c:	831a      	strh	r2, [r3, #24]
		/* Initialize LIS3DSH */
		TM_LIS302DL_LIS3DSH_Init(TM_LIS3DSH_Sensitivity_2G, TM_LIS3DSH_Filter_800Hz);
 800048e:	2100      	movs	r1, #0
 8000490:	2000      	movs	r0, #0
 8000492:	f000 fbdb 	bl	8000c4c <TM_LIS302DL_LIS3DSH_Init>
 8000496:	e004      	b.n	80004a2 <main+0x52>
	} else {
		/* Device is not recognized */
		
		/* Turn on ALL leds */
		TM_DISCO_LedOn(LED_GREEN | LED_RED | LED_BLUE | LED_ORANGE);
 8000498:	4b23      	ldr	r3, [pc, #140]	; (8000528 <main+0xd8>)
 800049a:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800049e:	831a      	strh	r2, [r3, #24]
		
		/* Infinite loop */
		while (1);
 80004a0:	e7fe      	b.n	80004a0 <main+0x50>
	}
	
	/* Delay for 2 seconds */
	Delayms(2000);
 80004a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004a6:	f7ff ffa7 	bl	80003f8 <Delayms>

	while (1) {
		/* Read axes data from initialized accelerometer */
		TM_LIS302DL_LIS3DSH_ReadAxes(&Axes_Data);
 80004aa:	4820      	ldr	r0, [pc, #128]	; (800052c <main+0xdc>)
 80004ac:	f000 fbfe 	bl	8000cac <TM_LIS302DL_LIS3DSH_ReadAxes>
		
		/* Turn LEDS on or off */
		/* Check X axes */
		if (Axes_Data.X > 200) {
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <main+0xdc>)
 80004b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004b6:	2bc8      	cmp	r3, #200	; 0xc8
 80004b8:	dd04      	ble.n	80004c4 <main+0x74>
			TM_DISCO_LedOn(LED_RED);
 80004ba:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <main+0xd8>)
 80004bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004c0:	831a      	strh	r2, [r3, #24]
 80004c2:	e003      	b.n	80004cc <main+0x7c>
		} else {
			TM_DISCO_LedOff(LED_RED);
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <main+0xd8>)
 80004c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004ca:	835a      	strh	r2, [r3, #26]
		}
		if (Axes_Data.X < -200) {
 80004cc:	4b17      	ldr	r3, [pc, #92]	; (800052c <main+0xdc>)
 80004ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004d2:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80004d6:	da04      	bge.n	80004e2 <main+0x92>
			TM_DISCO_LedOn(LED_GREEN);
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <main+0xd8>)
 80004da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004de:	831a      	strh	r2, [r3, #24]
 80004e0:	e003      	b.n	80004ea <main+0x9a>
		} else {
			TM_DISCO_LedOff(LED_GREEN);
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <main+0xd8>)
 80004e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004e8:	835a      	strh	r2, [r3, #26]
		}
		/* Check Y axes */
		if (Axes_Data.Y > 200) {
 80004ea:	4b10      	ldr	r3, [pc, #64]	; (800052c <main+0xdc>)
 80004ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80004f0:	2bc8      	cmp	r3, #200	; 0xc8
 80004f2:	dd04      	ble.n	80004fe <main+0xae>
			TM_DISCO_LedOn(LED_ORANGE);
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <main+0xd8>)
 80004f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004fa:	831a      	strh	r2, [r3, #24]
 80004fc:	e003      	b.n	8000506 <main+0xb6>
		} else {
			TM_DISCO_LedOff(LED_ORANGE);
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <main+0xd8>)
 8000500:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000504:	835a      	strh	r2, [r3, #26]
		}
		if (Axes_Data.Y < -200) {
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <main+0xdc>)
 8000508:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800050c:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8000510:	da04      	bge.n	800051c <main+0xcc>
			TM_DISCO_LedOn(LED_BLUE);
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <main+0xd8>)
 8000514:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000518:	831a      	strh	r2, [r3, #24]
 800051a:	e7c6      	b.n	80004aa <main+0x5a>
		} else {
			TM_DISCO_LedOff(LED_BLUE);
 800051c:	4b02      	ldr	r3, [pc, #8]	; (8000528 <main+0xd8>)
 800051e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000522:	835a      	strh	r2, [r3, #26]
		TM_LIS302DL_LIS3DSH_ReadAxes(&Axes_Data);
 8000524:	e7c1      	b.n	80004aa <main+0x5a>
 8000526:	bf00      	nop
 8000528:	40020c00 	.word	0x40020c00
 800052c:	2000005c 	.word	0x2000005c

08000530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000568 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000534:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000536:	e003      	b.n	8000540 <LoopCopyDataInit>

08000538 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800053a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800053c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800053e:	3104      	adds	r1, #4

08000540 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000540:	480b      	ldr	r0, [pc, #44]	; (8000570 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000544:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000546:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000548:	d3f6      	bcc.n	8000538 <CopyDataInit>
  ldr  r2, =_sbss
 800054a:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800054c:	e002      	b.n	8000554 <LoopFillZerobss>

0800054e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800054e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000550:	f842 3b04 	str.w	r3, [r2], #4

08000554 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000556:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000558:	d3f9      	bcc.n	800054e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800055a:	f000 f83b 	bl	80005d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800055e:	f001 f965 	bl	800182c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000562:	f7ff ff75 	bl	8000450 <main>
  bx  lr    
 8000566:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000568:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800056c:	08001894 	.word	0x08001894
  ldr  r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000574:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000578:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 800057c:	2000006c 	.word	0x2000006c

08000580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000580:	e7fe      	b.n	8000580 <ADC_IRQHandler>

08000582 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000594:	e7fe      	b.n	8000594 <HardFault_Handler+0x4>

08000596 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800059a:	e7fe      	b.n	800059a <MemManage_Handler+0x4>

0800059c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <BusFault_Handler+0x4>

080005a2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <UsageFault_Handler+0x4>

080005a8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005d8:	4a16      	ldr	r2, [pc, #88]	; (8000634 <SystemInit+0x60>)
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <SystemInit+0x60>)
 80005dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <SystemInit+0x64>)
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <SystemInit+0x64>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005f4:	4b10      	ldr	r3, [pc, #64]	; (8000638 <SystemInit+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005fa:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <SystemInit+0x64>)
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <SystemInit+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000608:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <SystemInit+0x64>)
 800060c:	4a0b      	ldr	r2, [pc, #44]	; (800063c <SystemInit+0x68>)
 800060e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000610:	4a09      	ldr	r2, [pc, #36]	; (8000638 <SystemInit+0x64>)
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <SystemInit+0x64>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800061a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <SystemInit+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000622:	f000 f80d 	bl	8000640 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000626:	4b03      	ldr	r3, [pc, #12]	; (8000634 <SystemInit+0x60>)
 8000628:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800062c:	609a      	str	r2, [r3, #8]
#endif
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	40023800 	.word	0x40023800
 800063c:	24003010 	.word	0x24003010

08000640 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800064e:	4a36      	ldr	r2, [pc, #216]	; (8000728 <SetSysClock+0xe8>)
 8000650:	4b35      	ldr	r3, [pc, #212]	; (8000728 <SetSysClock+0xe8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000658:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800065a:	4b33      	ldr	r3, [pc, #204]	; (8000728 <SetSysClock+0xe8>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000662:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3301      	adds	r3, #1
 8000668:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d103      	bne.n	8000678 <SetSysClock+0x38>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000676:	d1f0      	bne.n	800065a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000678:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <SetSysClock+0xe8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000684:	2301      	movs	r3, #1
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	e001      	b.n	800068e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d142      	bne.n	800071a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000694:	4a24      	ldr	r2, [pc, #144]	; (8000728 <SetSysClock+0xe8>)
 8000696:	4b24      	ldr	r3, [pc, #144]	; (8000728 <SetSysClock+0xe8>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80006a0:	4a22      	ldr	r2, [pc, #136]	; (800072c <SetSysClock+0xec>)
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <SetSysClock+0xec>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006aa:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80006ac:	4a1e      	ldr	r2, [pc, #120]	; (8000728 <SetSysClock+0xe8>)
 80006ae:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <SetSysClock+0xe8>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80006b4:	4a1c      	ldr	r2, [pc, #112]	; (8000728 <SetSysClock+0xe8>)
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <SetSysClock+0xe8>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006be:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80006c0:	4a19      	ldr	r2, [pc, #100]	; (8000728 <SetSysClock+0xe8>)
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <SetSysClock+0xe8>)
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80006ca:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <SetSysClock+0xe8>)
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <SetSysClock+0xf0>)
 80006d0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006d2:	4a15      	ldr	r2, [pc, #84]	; (8000728 <SetSysClock+0xe8>)
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <SetSysClock+0xe8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006dc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006de:	bf00      	nop
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <SetSysClock+0xe8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f9      	beq.n	80006e0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <SetSysClock+0xf4>)
 80006ee:	f240 6205 	movw	r2, #1541	; 0x605
 80006f2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80006f4:	4a0c      	ldr	r2, [pc, #48]	; (8000728 <SetSysClock+0xe8>)
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <SetSysClock+0xe8>)
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	f023 0303 	bic.w	r3, r3, #3
 80006fe:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000700:	4a09      	ldr	r2, [pc, #36]	; (8000728 <SetSysClock+0xe8>)
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <SetSysClock+0xe8>)
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	f043 0302 	orr.w	r3, r3, #2
 800070a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800070c:	bf00      	nop
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <SetSysClock+0xe8>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	f003 030c 	and.w	r3, r3, #12
 8000716:	2b08      	cmp	r3, #8
 8000718:	d1f9      	bne.n	800070e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000
 8000730:	07405408 	.word	0x07405408
 8000734:	40023c00 	.word	0x40023c00

08000738 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	da0b      	bge.n	8000764 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800074c:	490d      	ldr	r1, [pc, #52]	; (8000784 <NVIC_SetPriority+0x4c>)
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	f003 030f 	and.w	r3, r3, #15
 8000754:	3b04      	subs	r3, #4
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000762:	e009      	b.n	8000778 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000764:	4908      	ldr	r1, [pc, #32]	; (8000788 <NVIC_SetPriority+0x50>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	e000e100 	.word	0xe000e100

0800078c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800079a:	d301      	bcc.n	80007a0 <SysTick_Config+0x14>
 800079c:	2301      	movs	r3, #1
 800079e:	e011      	b.n	80007c4 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80007a0:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <SysTick_Config+0x40>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80007a8:	3b01      	subs	r3, #1
 80007aa:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80007ac:	210f      	movs	r1, #15
 80007ae:	f04f 30ff 	mov.w	r0, #4294967295
 80007b2:	f7ff ffc1 	bl	8000738 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <SysTick_Config+0x40>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <SysTick_Config+0x40>)
 80007be:	2207      	movs	r2, #7
 80007c0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80007c2:	2300      	movs	r3, #0
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	e000e010 	.word	0xe000e010

080007d0 <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 80007d6:	4b37      	ldr	r3, [pc, #220]	; (80008b4 <SysTick_Handler+0xe4>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3301      	adds	r3, #1
 80007dc:	4a35      	ldr	r2, [pc, #212]	; (80008b4 <SysTick_Handler+0xe4>)
 80007de:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 80007e0:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <SysTick_Handler+0xe8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d004      	beq.n	80007f2 <SysTick_Handler+0x22>
		TM_Time2--;
 80007e8:	4b33      	ldr	r3, [pc, #204]	; (80008b8 <SysTick_Handler+0xe8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	4a32      	ldr	r2, [pc, #200]	; (80008b8 <SysTick_Handler+0xe8>)
 80007f0:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 80007f2:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 80007f6:	2300      	movs	r3, #0
 80007f8:	71fb      	strb	r3, [r7, #7]
 80007fa:	e052      	b.n	80008a2 <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	4a2f      	ldr	r2, [pc, #188]	; (80008bc <SysTick_Handler+0xec>)
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	4413      	add	r3, r2
 8000804:	685b      	ldr	r3, [r3, #4]
		if (
 8000806:	2b00      	cmp	r3, #0
 8000808:	d048      	beq.n	800089c <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4a2b      	ldr	r2, [pc, #172]	; (80008bc <SysTick_Handler+0xec>)
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	7b1b      	ldrb	r3, [r3, #12]
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8000816:	2b00      	cmp	r3, #0
 8000818:	d040      	beq.n	800089c <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	4a27      	ldr	r2, [pc, #156]	; (80008bc <SysTick_Handler+0xec>)
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8000826:	2b00      	cmp	r3, #0
 8000828:	d038      	beq.n	800089c <SysTick_Handler+0xcc>
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	4a23      	ldr	r2, [pc, #140]	; (80008bc <SysTick_Handler+0xec>)
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	689a      	ldr	r2, [r3, #8]
 8000836:	3a01      	subs	r2, #1
 8000838:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <SysTick_Handler+0xec>)
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4413      	add	r3, r2
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d128      	bne.n	800089c <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <SysTick_Handler+0xec>)
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4413      	add	r3, r2
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	691a      	ldr	r2, [r3, #16]
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	4918      	ldr	r1, [pc, #96]	; (80008bc <SysTick_Handler+0xec>)
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	440b      	add	r3, r1
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4618      	mov	r0, r3
 8000864:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	4a14      	ldr	r2, [pc, #80]	; (80008bc <SysTick_Handler+0xec>)
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	685a      	ldr	r2, [r3, #4]
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	4912      	ldr	r1, [pc, #72]	; (80008bc <SysTick_Handler+0xec>)
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	440b      	add	r3, r1
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <SysTick_Handler+0xec>)
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d106      	bne.n	800089c <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <SysTick_Handler+0xec>)
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	2200      	movs	r2, #0
 800089a:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < CustomTimers.Count; i++) {
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	3301      	adds	r3, #1
 80008a0:	71fb      	strb	r3, [r7, #7]
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <SysTick_Handler+0xec>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d3a7      	bcc.n	80007fc <SysTick_Handler+0x2c>
				}
			}
		}
	}
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000020 	.word	0x20000020
 80008b8:	20000024 	.word	0x20000024
 80008bc:	2000002c 	.word	0x2000002c

080008c0 <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(SystemCoreClock / 1000)) {
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <TM_DELAY_Init+0x3c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <TM_DELAY_Init+0x40>)
 80008ca:	fba2 2303 	umull	r2, r3, r2, r3
 80008ce:	099b      	lsrs	r3, r3, #6
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff5b 	bl	800078c <SysTick_Config>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d000      	beq.n	80008de <TM_DELAY_Init+0x1e>
		/* Capture error */
		while (1);
 80008dc:	e7fe      	b.n	80008dc <TM_DELAY_Init+0x1c>
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = SystemCoreClock / 7000000;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <TM_DELAY_Init+0x3c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	099b      	lsrs	r3, r3, #6
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <TM_DELAY_Init+0x44>)
 80008e6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ea:	0a9b      	lsrs	r3, r3, #10
 80008ec:	4a06      	ldr	r2, [pc, #24]	; (8000908 <TM_DELAY_Init+0x48>)
 80008ee:	6013      	str	r3, [r2, #0]
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <TM_DELAY_Init+0x4c>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000000 	.word	0x20000000
 8000900:	10624dd3 	.word	0x10624dd3
 8000904:	02659117 	.word	0x02659117
 8000908:	20000064 	.word	0x20000064
 800090c:	20000028 	.word	0x20000028

08000910 <TM_DISCO_LedInit>:
#include "tm_stm32f4_disco.h"

/* Button pressed status for onpressed/onreleased events */
static volatile uint8_t TM_INT_DISCO_ButtonPressed = 0;

void TM_DISCO_LedInit(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af02      	add	r7, sp, #8
	/* Set pins as output */
	TM_GPIO_Init(TM_DISCO_LED_PORT, LED_ALL, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
 8000916:	2303      	movs	r3, #3
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	2300      	movs	r3, #0
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2300      	movs	r3, #0
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <TM_DISCO_LedInit+0x2c>)
 8000928:	f000 f80a 	bl	8000940 <TM_GPIO_Init>
	
	/* Turn leds off */
	TM_DISCO_LedOff(LED_ALL);
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <TM_DISCO_LedInit+0x2c>)
 800092e:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000932:	835a      	strh	r2, [r3, #26]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40020c00 	.word	0x40020c00

08000940 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af02      	add	r7, sp, #8
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	4608      	mov	r0, r1
 800094a:	4611      	mov	r1, r2
 800094c:	461a      	mov	r2, r3
 800094e:	4603      	mov	r3, r0
 8000950:	807b      	strh	r3, [r7, #2]
 8000952:	460b      	mov	r3, r1
 8000954:	707b      	strb	r3, [r7, #1]
 8000956:	4613      	mov	r3, r2
 8000958:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 800095a:	887b      	ldrh	r3, [r7, #2]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00e      	beq.n	800097e <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f000 f875 	bl	8000a50 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8000966:	7838      	ldrb	r0, [r7, #0]
 8000968:	787a      	ldrb	r2, [r7, #1]
 800096a:	8879      	ldrh	r1, [r7, #2]
 800096c:	7d3b      	ldrb	r3, [r7, #20]
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	7c3b      	ldrb	r3, [r7, #16]
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	4603      	mov	r3, r0
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 f882 	bl	8000a80 <TM_GPIO_INT_Init>
 800097c:	e000      	b.n	8000980 <TM_GPIO_Init+0x40>
		return;
 800097e:	bf00      	nop
}
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 8000986:	b580      	push	{r7, lr}
 8000988:	b086      	sub	sp, #24
 800098a:	af02      	add	r7, sp, #8
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	4608      	mov	r0, r1
 8000990:	4611      	mov	r1, r2
 8000992:	461a      	mov	r2, r3
 8000994:	4603      	mov	r3, r0
 8000996:	807b      	strh	r3, [r7, #2]
 8000998:	460b      	mov	r3, r1
 800099a:	707b      	strb	r3, [r7, #1]
 800099c:	4613      	mov	r3, r2
 800099e:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 80009a0:	887b      	ldrh	r3, [r7, #2]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d03e      	beq.n	8000a24 <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f000 f852 	bl	8000a50 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	e029      	b.n	8000a06 <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80009b2:	887a      	ldrh	r2, [r7, #2]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	fa42 f303 	asr.w	r3, r2, r3
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d01d      	beq.n	80009fe <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	08da      	lsrs	r2, r3, #3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	08d9      	lsrs	r1, r3, #3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3108      	adds	r1, #8
 80009ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80009d2:	68f9      	ldr	r1, [r7, #12]
 80009d4:	f001 0107 	and.w	r1, r1, #7
 80009d8:	0089      	lsls	r1, r1, #2
 80009da:	200f      	movs	r0, #15
 80009dc:	fa00 f101 	lsl.w	r1, r0, r1
 80009e0:	43c9      	mvns	r1, r1
 80009e2:	400b      	ands	r3, r1
 80009e4:	7f38      	ldrb	r0, [r7, #28]
 80009e6:	68f9      	ldr	r1, [r7, #12]
 80009e8:	f001 0107 	and.w	r1, r1, #7
 80009ec:	0089      	lsls	r1, r1, #2
 80009ee:	fa00 f101 	lsl.w	r1, r0, r1
 80009f2:	4319      	orrs	r1, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3208      	adds	r2, #8
 80009f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80009fc:	e000      	b.n	8000a00 <TM_GPIO_InitAlternate+0x7a>
			continue;
 80009fe:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	3301      	adds	r3, #1
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d9d2      	bls.n	80009b2 <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8000a0c:	787a      	ldrb	r2, [r7, #1]
 8000a0e:	8879      	ldrh	r1, [r7, #2]
 8000a10:	7e3b      	ldrb	r3, [r7, #24]
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	783b      	ldrb	r3, [r7, #0]
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 f82f 	bl	8000a80 <TM_GPIO_INT_Init>
 8000a22:	e000      	b.n	8000a26 <TM_GPIO_InitAlternate+0xa0>
		return;
 8000a24:	bf00      	nop
}
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8000a3a:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8000a3e:	0a9b      	lsrs	r3, r3, #10
 8000a40:	b29b      	uxth	r3, r3
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ffe7 	bl	8000a2c <TM_GPIO_GetPortSource>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	2301      	movs	r3, #1
 8000a64:	fa03 f102 	lsl.w	r1, r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <TM_GPIO_INT_EnableClock+0x2c>)
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <TM_GPIO_INT_EnableClock+0x2c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	430b      	orrs	r3, r1
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	4608      	mov	r0, r1
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4603      	mov	r3, r0
 8000a90:	807b      	strh	r3, [r7, #2]
 8000a92:	460b      	mov	r3, r1
 8000a94:	707b      	strb	r3, [r7, #1]
 8000a96:	4613      	mov	r3, r2
 8000a98:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ffc6 	bl	8000a2c <TM_GPIO_GetPortSource>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	73fb      	strb	r3, [r7, #15]
 8000aa8:	e067      	b.n	8000b7a <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8000aaa:	887a      	ldrh	r2, [r7, #2]
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	fa42 f303 	asr.w	r3, r2, r3
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d05b      	beq.n	8000b72 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8000aba:	7bbb      	ldrb	r3, [r7, #14]
 8000abc:	7bba      	ldrb	r2, [r7, #14]
 8000abe:	4932      	ldr	r1, [pc, #200]	; (8000b88 <TM_GPIO_INT_Init+0x108>)
 8000ac0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000ac4:	b211      	sxth	r1, r2
 8000ac6:	7bfa      	ldrb	r2, [r7, #15]
 8000ac8:	2001      	movs	r0, #1
 8000aca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ace:	b212      	sxth	r2, r2
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	b212      	sxth	r2, r2
 8000ad4:	b291      	uxth	r1, r2
 8000ad6:	4a2c      	ldr	r2, [pc, #176]	; (8000b88 <TM_GPIO_INT_Init+0x108>)
 8000ad8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	7bfa      	ldrb	r2, [r7, #15]
 8000ae2:	0052      	lsls	r2, r2, #1
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aea:	43d2      	mvns	r2, r2
 8000aec:	4013      	ands	r3, r2
 8000aee:	7e39      	ldrb	r1, [r7, #24]
 8000af0:	7bfa      	ldrb	r2, [r7, #15]
 8000af2:	0052      	lsls	r2, r2, #1
 8000af4:	fa01 f202 	lsl.w	r2, r1, r2
 8000af8:	431a      	orrs	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	2103      	movs	r1, #3
 8000b08:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	4013      	ands	r3, r2
 8000b10:	7879      	ldrb	r1, [r7, #1]
 8000b12:	7bfa      	ldrb	r2, [r7, #15]
 8000b14:	0052      	lsls	r2, r2, #1
 8000b16:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8000b20:	787b      	ldrb	r3, [r7, #1]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d002      	beq.n	8000b2c <TM_GPIO_INT_Init+0xac>
 8000b26:	787b      	ldrb	r3, [r7, #1]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d123      	bne.n	8000b74 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	7bfa      	ldrb	r2, [r7, #15]
 8000b32:	2101      	movs	r1, #1
 8000b34:	fa01 f202 	lsl.w	r2, r1, r2
 8000b38:	b292      	uxth	r2, r2
 8000b3a:	43d2      	mvns	r2, r2
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	7839      	ldrb	r1, [r7, #0]
 8000b40:	7bfa      	ldrb	r2, [r7, #15]
 8000b42:	fa01 f202 	lsl.w	r2, r1, r2
 8000b46:	b292      	uxth	r2, r2
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	2103      	movs	r1, #3
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	4013      	ands	r3, r2
 8000b60:	7f39      	ldrb	r1, [r7, #28]
 8000b62:	7bfa      	ldrb	r2, [r7, #15]
 8000b64:	0052      	lsls	r2, r2, #1
 8000b66:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	e000      	b.n	8000b74 <TM_GPIO_INT_Init+0xf4>
			continue;
 8000b72:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	3301      	adds	r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d994      	bls.n	8000aaa <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000044 	.word	0x20000044

08000b8c <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <TM_SPI_Send+0x1e>
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e025      	b.n	8000bf6 <TM_SPI_Send+0x6a>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 8000baa:	bf00      	nop
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	891b      	ldrh	r3, [r3, #8]
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	f003 0303 	and.w	r3, r3, #3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f8      	beq.n	8000bac <TM_SPI_Send+0x20>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	891b      	ldrh	r3, [r3, #8]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1f1      	bne.n	8000bac <TM_SPI_Send+0x20>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	819a      	strh	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT(SPIx);
 8000bd0:	bf00      	nop
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	891b      	ldrh	r3, [r3, #8]
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	f003 0303 	and.w	r3, r3, #3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0f8      	beq.n	8000bd2 <TM_SPI_Send+0x46>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	891b      	ldrh	r3, [r3, #8]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1f1      	bne.n	8000bd2 <TM_SPI_Send+0x46>
	
	/* Return data from buffer */
	return SPIx->DR;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	899b      	ldrh	r3, [r3, #12]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	b2db      	uxtb	r3, r3
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <TM_LIS302DL_LIS3DSH_Detect>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
float TM_LIS3DSH_INT_Sensitivity;

/* Public */
TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Detect(void) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
	uint8_t id;
	/* Delay on power up */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 8000c0a:	f000 faef 	bl	80011ec <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Init SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 8000c0e:	f000 f86b 	bl	8000ce8 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Get ID */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI(&id, LIS302DL_LIS3DSH_REG_WHO_I_AM, 1);
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	2201      	movs	r2, #1
 8000c16:	210f      	movs	r1, #15
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 f8c3 	bl	8000da4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	/* Check device */
	if (id == LIS302DL_ID) {
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b3b      	cmp	r3, #59	; 0x3b
 8000c22:	d104      	bne.n	8000c2e <TM_LIS302DL_LIS3DSH_Detect+0x2a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e008      	b.n	8000c40 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	} else if (id == LIS3DSH_ID) {
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b3f      	cmp	r3, #63	; 0x3f
 8000c32:	d104      	bne.n	8000c3e <TM_LIS302DL_LIS3DSH_Detect+0x3a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 8000c36:	2202      	movs	r2, #2
 8000c38:	701a      	strb	r2, [r3, #0]
		/* Return device */;
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	e000      	b.n	8000c40 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	}
	
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	2000005a 	.word	0x2000005a

08000c4c <TM_LIS302DL_LIS3DSH_Init>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Init(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	460a      	mov	r2, r1
 8000c56:	71fb      	strb	r3, [r7, #7]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	71bb      	strb	r3, [r7, #6]
	/* Init pinout and SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 8000c5c:	f000 f844 	bl	8000ce8 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Some delay */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 8000c60:	f000 fac4 	bl	80011ec <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Detect proper device and init it */
	if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8000c64:	f7ff ffce 	bl	8000c04 <TM_LIS302DL_LIS3DSH_Detect>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d107      	bne.n	8000c7e <TM_LIS302DL_LIS3DSH_Init+0x32>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(Sensitivity, Filter);
 8000c6e:	79ba      	ldrb	r2, [r7, #6]
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f945 	bl	8000f04 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e010      	b.n	8000ca0 <TM_LIS302DL_LIS3DSH_Init+0x54>
	} else if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 8000c7e:	f7ff ffc1 	bl	8000c04 <TM_LIS302DL_LIS3DSH_Detect>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d107      	bne.n	8000c98 <TM_LIS302DL_LIS3DSH_Init+0x4c>
		/* Init sequence for LIS3DSH */
		TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(Sensitivity, Filter);
 8000c88:	79ba      	ldrb	r2, [r7, #6]
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f8b4 	bl	8000dfc <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8000c94:	2302      	movs	r3, #2
 8000c96:	e003      	b.n	8000ca0 <TM_LIS302DL_LIS3DSH_Init+0x54>
	}
	
	/* Error detection */
	TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <TM_LIS302DL_LIS3DSH_Init+0x5c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	2000005a 	.word	0x2000005a

08000cac <TM_LIS302DL_LIS3DSH_ReadAxes>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d104      	bne.n	8000cc6 <TM_LIS302DL_LIS3DSH_ReadAxes+0x1a>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_INT_ReadAxes(Axes_Data);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 fa2d 	bl	800111c <TM_LIS302DL_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e009      	b.n	8000cda <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	} else if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d104      	bne.n	8000cd8 <TM_LIS302DL_LIS3DSH_ReadAxes+0x2c>
		/* Init sequence for LIS3DSH */
		TM_LIS3DSH_INT_ReadAxes(Axes_Data);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 f996 	bl	8001000 <TM_LIS3DSH_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	e000      	b.n	8000cda <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	}
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000005a 	.word	0x2000005a

08000ce8 <TM_LIS302DL_LIS3DSH_INT_InitPins>:

/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	static uint8_t initialized = 0;
	if (initialized) {
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d11d      	bne.n	8000d32 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4a>
		return;
	}
	
	/* Initialize SPI */
	TM_SPI_Init(LIS302DL_LIS3DSH_SPI, LIS302DL_LIS3DSH_SPI_PINSPACK);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4811      	ldr	r0, [pc, #68]	; (8000d40 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x58>)
 8000cfa:	f000 fa8b 	bl	8001214 <TM_SPI_Init>
	
	/* Enable clock for CS port */
	RCC_AHB1PeriphClockCmd(LIS302DL_LIS3DSH_CS_RCC, ENABLE);
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2010      	movs	r0, #16
 8000d02:	f7ff faef 	bl	80002e4 <RCC_AHB1PeriphClockCmd>
	
	/* Configure CS pin */
	GPIO_InitStruct.GPIO_Pin = LIS302DL_LIS3DSH_CS_PIN;
 8000d06:	2308      	movs	r3, #8
 8000d08:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_25MHz;
 8000d16:	2301      	movs	r3, #1
 8000d18:	717b      	strb	r3, [r7, #5]
	/* GPIO Init */
	GPIO_Init(LIS302DL_LIS3DSH_CS_PORT, &GPIO_InitStruct);
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4809      	ldr	r0, [pc, #36]	; (8000d44 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 8000d20:	f7ff fa52 	bl	80001c8 <GPIO_Init>
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x5c>)
 8000d26:	2208      	movs	r2, #8
 8000d28:	831a      	strh	r2, [r3, #24]
	
	initialized = 1;
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <TM_LIS302DL_LIS3DSH_INT_InitPins+0x54>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
 8000d30:	e000      	b.n	8000d34 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x4c>
		return;
 8000d32:	bf00      	nop
}
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000005b 	.word	0x2000005b
 8000d40:	40013000 	.word	0x40013000
 8000d44:	40021000 	.word	0x40021000

08000d48 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>:

void TM_LIS302DL_LIS3DSH_INT_WriteSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	70fb      	strb	r3, [r7, #3]
 8000d54:	4613      	mov	r3, r2
 8000d56:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	835a      	strh	r2, [r3, #26]
	
	if (count > 1 && TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8000d5e:	78bb      	ldrb	r3, [r7, #2]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d907      	bls.n	8000d74 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x54>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d103      	bne.n	8000d74 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2c>
		/* Add autoincrement bit */
		/* Only LIS302DL device */
		addr |= 0x40;
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d72:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 8000d74:	78fb      	ldrb	r3, [r7, #3]
 8000d76:	4619      	mov	r1, r3
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 8000d7a:	f7ff ff07 	bl	8000b8c <TM_SPI_Send>
	/* Send data */
	TM_SPI_WriteMulti(LIS302DL_LIS3DSH_SPI, data, count);
 8000d7e:	78bb      	ldrb	r3, [r7, #2]
 8000d80:	461a      	mov	r2, r3
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	4806      	ldr	r0, [pc, #24]	; (8000da0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 8000d86:	f000 fab5 	bl	80012f4 <TM_SPI_WriteMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 8000d8a:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x50>)
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	831a      	strh	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	2000005a 	.word	0x2000005a
 8000da0:	40013000 	.word	0x40013000

08000da4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>:

void TM_LIS302DL_LIS3DSH_INT_ReadSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
 8000db0:	4613      	mov	r3, r2
 8000db2:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 8000db6:	2208      	movs	r2, #8
 8000db8:	835a      	strh	r2, [r3, #26]
	
	/* Add read bit */
	addr |= 0x80;
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dc0:	70fb      	strb	r3, [r7, #3]
	
	if (count > 1) {
 8000dc2:	78bb      	ldrb	r3, [r7, #2]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d903      	bls.n	8000dd0 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x2c>
		/* Add autoincrement bit */
		addr |= 0x40;
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dce:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4808      	ldr	r0, [pc, #32]	; (8000df8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 8000dd6:	f7ff fed9 	bl	8000b8c <TM_SPI_Send>
	/* Receive data */
	TM_SPI_ReadMulti(LIS302DL_LIS3DSH_SPI, data, 0x00, count);
 8000dda:	78bb      	ldrb	r3, [r7, #2]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 8000de2:	f000 facc 	bl	800137e <TM_SPI_ReadMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 8000de6:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x50>)
 8000de8:	2208      	movs	r2, #8
 8000dea:	831a      	strh	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40013000 	.word	0x40013000

08000dfc <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	460a      	mov	r2, r1
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmpreg;
	uint16_t temp;

	/* Set data */
	temp = (uint16_t) (LIS3DSH_DATARATE_100 | LIS3DSH_XYZ_ENABLE);
 8000e0c:	2367      	movs	r3, #103	; 0x67
 8000e0e:	81fb      	strh	r3, [r7, #14]
	temp |= (uint16_t) (LIS3DSH_SERIALINTERFACE_4WIRE | LIS3DSH_SELFTEST_NORMAL);
	
	/* Set sensitivity */
	if (Sensitivity == TM_LIS3DSH_Sensitivity_2G) {
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d103      	bne.n	8000e1e <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x22>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_2);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000e16:	4b35      	ldr	r3, [pc, #212]	; (8000eec <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8000e18:	4a35      	ldr	r2, [pc, #212]	; (8000ef0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf4>)
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e02a      	b.n	8000e74 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_4G) {
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d107      	bne.n	8000e34 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x38>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_4);
 8000e24:	89fb      	ldrh	r3, [r7, #14]
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8000e2e:	4a31      	ldr	r2, [pc, #196]	; (8000ef4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf8>)
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	e01f      	b.n	8000e74 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_6G) {
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d107      	bne.n	8000e4a <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x4e>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_6);
 8000e3a:	89fb      	ldrh	r3, [r7, #14]
 8000e3c:	f043 0310 	orr.w	r3, r3, #16
 8000e40:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8000e42:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8000e44:	4a2c      	ldr	r2, [pc, #176]	; (8000ef8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xfc>)
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	e014      	b.n	8000e74 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_8G) {
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d107      	bne.n	8000e60 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x64>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_8);
 8000e50:	89fb      	ldrh	r3, [r7, #14]
 8000e52:	f043 0318 	orr.w	r3, r3, #24
 8000e56:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8000e5a:	4a28      	ldr	r2, [pc, #160]	; (8000efc <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x100>)
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	e009      	b.n	8000e74 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d13b      	bne.n	8000ede <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe2>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
 8000e66:	89fb      	ldrh	r3, [r7, #14]
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8000e70:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x104>)
 8000e72:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	
	/* Set filter */
	if (Filter == TM_LIS3DSH_Filter_800Hz) {
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d01a      	beq.n	8000eb0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_800 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_400Hz) {
 8000e7a:	79bb      	ldrb	r3, [r7, #6]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d104      	bne.n	8000e8a <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x8e>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_400 << 8);
 8000e80:	89fb      	ldrh	r3, [r7, #14]
 8000e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e86:	81fb      	strh	r3, [r7, #14]
 8000e88:	e012      	b.n	8000eb0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
 8000e8a:	79bb      	ldrb	r3, [r7, #6]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d106      	bne.n	8000e9e <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xa2>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
 8000e90:	89fb      	ldrh	r3, [r7, #14]
 8000e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000e9a:	81fb      	strh	r3, [r7, #14]
 8000e9c:	e008      	b.n	8000eb0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
 8000e9e:	79bb      	ldrb	r3, [r7, #6]
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	d11e      	bne.n	8000ee2 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe6>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
 8000ea4:	89fb      	ldrh	r3, [r7, #14]
 8000ea6:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8000eaa:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8000eae:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	
	/* Configure MEMS: power mode(ODR) and axes enable */
	tmpreg = (uint8_t) (temp);
 8000eb0:	89fb      	ldrh	r3, [r7, #14]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG4 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG4_ADDR, 1);
 8000eb6:	f107 030d 	add.w	r3, r7, #13
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff42 	bl	8000d48 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>

	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);
 8000ec4:	89fb      	ldrh	r3, [r7, #14]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
 8000ece:	f107 030d 	add.w	r3, r7, #13
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2124      	movs	r1, #36	; 0x24
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff36 	bl	8000d48 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 8000edc:	e002      	b.n	8000ee4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
		return;
 8000ede:	bf00      	nop
 8000ee0:	e000      	b.n	8000ee4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
		return;
 8000ee2:	bf00      	nop
}
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000068 	.word	0x20000068
 8000ef0:	3d75c28f 	.word	0x3d75c28f
 8000ef4:	3df5c28f 	.word	0x3df5c28f
 8000ef8:	3e3851ec 	.word	0x3e3851ec
 8000efc:	3e75c28f 	.word	0x3e75c28f
 8000f00:	3f3ae148 	.word	0x3f3ae148

08000f04 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	4613      	mov	r3, r2
 8000f12:	71bb      	strb	r3, [r7, #6]
	uint16_t ctrl;
	
	/* Reboot */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000f14:	f107 030e 	add.w	r3, r7, #14
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2121      	movs	r1, #33	; 0x21
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff41 	bl	8000da4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	ctrl |= LIS302DL_BOOT_REBOOTMEMORY;
 8000f22:	89fb      	ldrh	r3, [r7, #14]
 8000f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	81fb      	strh	r3, [r7, #14]
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000f2c:	f107 030e 	add.w	r3, r7, #14
 8000f30:	2201      	movs	r2, #1
 8000f32:	2121      	movs	r1, #33	; 0x21
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff07 	bl	8000d48 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Init settings */
	ctrl = (uint16_t) (LIS302DL_DATARATE_100 | LIS302DL_LOWPOWERMODE_ACTIVE | LIS302DL_SELFTEST_NORMAL | LIS302DL_XYZ_ENABLE);
 8000f3a:	2347      	movs	r3, #71	; 0x47
 8000f3c:	81fb      	strh	r3, [r7, #14]
	if (Sensitivity == TM_LIS302DL_Sensitivity_2_3G) {
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b05      	cmp	r3, #5
 8000f42:	d105      	bne.n	8000f50 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x4c>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_2_3;
 8000f44:	89fb      	ldrh	r3, [r7, #14]
 8000f46:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8000f48:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 8000f4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ff8 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf4>)
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e00a      	b.n	8000f66 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x62>
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d147      	bne.n	8000fe6 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe2>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
 8000f60:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 8000f62:	4a26      	ldr	r2, [pc, #152]	; (8000ffc <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf8>)
 8000f64:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 8000f66:	f107 030e 	add.w	r3, r7, #14
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff feea 	bl	8000d48 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Read filter */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000f74:	f107 030e 	add.w	r3, r7, #14
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2121      	movs	r1, #33	; 0x21
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fee3 	bl	8000d48 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	ctrl &= (uint8_t) ~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | LIS302DL_HIGHPASSFILTER_LEVEL_3 | LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
 8000f82:	89fb      	ldrh	r3, [r7, #14]
 8000f84:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	81fb      	strh	r3, [r7, #14]
	/* Set filter */
    ctrl |= (uint8_t) (LIS302DL_HIGHPASSFILTERINTERRUPT_1_2 | LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER);
 8000f8c:	89fb      	ldrh	r3, [r7, #14]
 8000f8e:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	81fb      	strh	r3, [r7, #14]
	/* Set filter value */
	if (Filter == TM_LIS302DL_Filter_2Hz) {
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d102      	bne.n	8000fa2 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x9e>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_0;
 8000f9c:	89fb      	ldrh	r3, [r7, #14]
 8000f9e:	81fb      	strh	r3, [r7, #14]
 8000fa0:	e019      	b.n	8000fd6 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_1Hz) {
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	2b05      	cmp	r3, #5
 8000fa6:	d105      	bne.n	8000fb4 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xb0>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_1;
 8000fa8:	89fb      	ldrh	r3, [r7, #14]
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	81fb      	strh	r3, [r7, #14]
 8000fb2:	e010      	b.n	8000fd6 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d105      	bne.n	8000fc6 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xc2>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	81fb      	strh	r3, [r7, #14]
 8000fc4:	e007      	b.n	8000fd6 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	2b07      	cmp	r3, #7
 8000fca:	d10e      	bne.n	8000fea <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe6>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
 8000fcc:	89fb      	ldrh	r3, [r7, #14]
 8000fce:	f043 0303 	orr.w	r3, r3, #3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000fd6:	f107 030e 	add.w	r3, r7, #14
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2121      	movs	r1, #33	; 0x21
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff feb2 	bl	8000d48 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 8000fe4:	e002      	b.n	8000fec <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
		return;
 8000fe6:	bf00      	nop
 8000fe8:	e000      	b.n	8000fec <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
		return;
 8000fea:	bf00      	nop
}
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000068 	.word	0x20000068
 8000ff8:	41900000 	.word	0x41900000
 8000ffc:	42900000 	.word	0x42900000

08001000 <TM_LIS3DSH_INT_ReadAxes>:

void TM_LIS3DSH_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t *Axes_Data) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	int8_t buffer[6];

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	2201      	movs	r2, #1
 800100e:	2128      	movs	r1, #40	; 0x28
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fec7 	bl	8000da4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	3301      	adds	r3, #1
 800101c:	2201      	movs	r2, #1
 800101e:	2129      	movs	r1, #41	; 0x29
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff febf 	bl	8000da4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	3302      	adds	r3, #2
 800102c:	2201      	movs	r2, #1
 800102e:	212a      	movs	r1, #42	; 0x2a
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff feb7 	bl	8000da4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	3303      	adds	r3, #3
 800103c:	2201      	movs	r2, #1
 800103e:	212b      	movs	r1, #43	; 0x2b
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff feaf 	bl	8000da4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	3304      	adds	r3, #4
 800104c:	2201      	movs	r2, #1
 800104e:	212c      	movs	r1, #44	; 0x2c
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fea7 	bl	8000da4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	3305      	adds	r3, #5
 800105c:	2201      	movs	r2, #1
 800105e:	212d      	movs	r1, #45	; 0x2d
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe9f 	bl	8000da4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t)((buffer[1] << 8) + buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 8001066:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800106a:	b29b      	uxth	r3, r3
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b29a      	uxth	r2, r3
 8001070:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8001074:	b29b      	uxth	r3, r3
 8001076:	4413      	add	r3, r2
 8001078:	b29b      	uxth	r3, r3
 800107a:	b21b      	sxth	r3, r3
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <TM_LIS3DSH_INT_ReadAxes+0x118>)
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001092:	edc7 7a00 	vstr	s15, [r7]
 8001096:	883b      	ldrh	r3, [r7, #0]
 8001098:	b21a      	sxth	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t)((buffer[3] << 8) + buffer[2]) * TM_LIS3DSH_INT_Sensitivity;
 800109e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	4413      	add	r3, r2
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <TM_LIS3DSH_INT_ReadAxes+0x118>)
 80010be:	edd3 7a00 	vldr	s15, [r3]
 80010c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ca:	edc7 7a00 	vstr	s15, [r7]
 80010ce:	883b      	ldrh	r3, [r7, #0]
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t)((buffer[5] << 8) + buffer[4]) * TM_LIS3DSH_INT_Sensitivity;
 80010d6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b29a      	uxth	r2, r3
 80010e0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4413      	add	r3, r2
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <TM_LIS3DSH_INT_ReadAxes+0x118>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
 80010fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001102:	edc7 7a00 	vstr	s15, [r7]
 8001106:	883b      	ldrh	r3, [r7, #0]
 8001108:	b21a      	sxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	809a      	strh	r2, [r3, #4]
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000068 	.word	0x20000068

0800111c <TM_LIS302DL_INT_ReadAxes>:

void TM_LIS302DL_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	int8_t buffer[3];
	int16_t SwitchXY;

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS302DL_OUT_X_ADDR, 1);
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	2201      	movs	r2, #1
 800112a:	2129      	movs	r1, #41	; 0x29
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fe39 	bl	8000da4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS302DL_OUT_Y_ADDR, 1);
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	3301      	adds	r3, #1
 8001138:	2201      	movs	r2, #1
 800113a:	212b      	movs	r1, #43	; 0x2b
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fe31 	bl	8000da4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS302DL_OUT_Z_ADDR, 1);
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	3302      	adds	r3, #2
 8001148:	2201      	movs	r2, #1
 800114a:	212d      	movs	r1, #45	; 0x2d
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fe29 	bl	8000da4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t) (buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 8001152:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <TM_LIS302DL_INT_ReadAxes+0xcc>)
 8001160:	edd3 7a00 	vldr	s15, [r3]
 8001164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116c:	edc7 7a00 	vstr	s15, [r7]
 8001170:	883b      	ldrh	r3, [r7, #0]
 8001172:	b21a      	sxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t) (buffer[1]) * TM_LIS3DSH_INT_Sensitivity;
 8001178:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <TM_LIS302DL_INT_ReadAxes+0xcc>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001192:	edc7 7a00 	vstr	s15, [r7]
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	b21a      	sxth	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t) (buffer[2]) * TM_LIS3DSH_INT_Sensitivity;	
 800119e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80011a2:	ee07 3a90 	vmov	s15, r3
 80011a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <TM_LIS302DL_INT_ReadAxes+0xcc>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	edc7 7a00 	vstr	s15, [r7]
 80011bc:	883b      	ldrh	r3, [r7, #0]
 80011be:	b21a      	sxth	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	809a      	strh	r2, [r3, #4]
	/* Switch axes */
	SwitchXY  = Axes_Data->X;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	81fb      	strh	r3, [r7, #14]
	Axes_Data->X = Axes_Data->Y;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	801a      	strh	r2, [r3, #0]
	Axes_Data->X = -SwitchXY;
 80011d4:	89fb      	ldrh	r3, [r7, #14]
 80011d6:	425b      	negs	r3, r3
 80011d8:	b29b      	uxth	r3, r3
 80011da:	b21a      	sxth	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	801a      	strh	r2, [r3, #0]
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000068 	.word	0x20000068

080011ec <TM_LIS302DL_LIS3DSH_INT_Delay>:

void TM_LIS302DL_LIS3DSH_INT_Delay(void) {
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
	uint32_t delay = 1000000;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <TM_LIS302DL_LIS3DSH_INT_Delay+0x24>)
 80011f4:	607b      	str	r3, [r7, #4]
	while (delay--);
 80011f6:	bf00      	nop
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	1e5a      	subs	r2, r3, #1
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1fa      	bne.n	80011f8 <TM_LIS302DL_LIS3DSH_INT_Delay+0xc>
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	000f4240 	.word	0x000f4240

08001214 <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af02      	add	r7, sp, #8
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef USE_SPI1
	if (SPIx == SPI1) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a2e      	ldr	r2, [pc, #184]	; (80012dc <TM_SPI_Init+0xc8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d10a      	bne.n	800123e <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 8001228:	78f9      	ldrb	r1, [r7, #3]
 800122a:	2300      	movs	r3, #0
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2320      	movs	r3, #32
 8001236:	2200      	movs	r2, #0
 8001238:	4828      	ldr	r0, [pc, #160]	; (80012dc <TM_SPI_Init+0xc8>)
 800123a:	f000 f8f7 	bl	800142c <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a27      	ldr	r2, [pc, #156]	; (80012e0 <TM_SPI_Init+0xcc>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d10a      	bne.n	800125c <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 8001246:	78f9      	ldrb	r1, [r7, #3]
 8001248:	2300      	movs	r3, #0
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2320      	movs	r3, #32
 8001254:	2200      	movs	r2, #0
 8001256:	4822      	ldr	r0, [pc, #136]	; (80012e0 <TM_SPI_Init+0xcc>)
 8001258:	f000 f8e8 	bl	800142c <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <TM_SPI_Init+0xd0>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d10a      	bne.n	800127a <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 8001264:	78f9      	ldrb	r1, [r7, #3]
 8001266:	2300      	movs	r3, #0
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2320      	movs	r3, #32
 8001272:	2200      	movs	r2, #0
 8001274:	481b      	ldr	r0, [pc, #108]	; (80012e4 <TM_SPI_Init+0xd0>)
 8001276:	f000 f8d9 	bl	800142c <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a1a      	ldr	r2, [pc, #104]	; (80012e8 <TM_SPI_Init+0xd4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d10a      	bne.n	8001298 <TM_SPI_Init+0x84>
		TM_SPIx_Init(SPI4, pinspack, TM_SPI4_MODE, TM_SPI4_PRESCALER, TM_SPI4_MASTERSLAVE, TM_SPI4_FIRSTBIT);
 8001282:	78f9      	ldrb	r1, [r7, #3]
 8001284:	2300      	movs	r3, #0
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	f44f 7382 	mov.w	r3, #260	; 0x104
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2320      	movs	r3, #32
 8001290:	2200      	movs	r2, #0
 8001292:	4815      	ldr	r0, [pc, #84]	; (80012e8 <TM_SPI_Init+0xd4>)
 8001294:	f000 f8ca 	bl	800142c <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a14      	ldr	r2, [pc, #80]	; (80012ec <TM_SPI_Init+0xd8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d10a      	bne.n	80012b6 <TM_SPI_Init+0xa2>
		TM_SPIx_Init(SPI5, pinspack, TM_SPI5_MODE, TM_SPI5_PRESCALER, TM_SPI5_MASTERSLAVE, TM_SPI5_FIRSTBIT);
 80012a0:	78f9      	ldrb	r1, [r7, #3]
 80012a2:	2300      	movs	r3, #0
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2320      	movs	r3, #32
 80012ae:	2200      	movs	r2, #0
 80012b0:	480e      	ldr	r0, [pc, #56]	; (80012ec <TM_SPI_Init+0xd8>)
 80012b2:	f000 f8bb 	bl	800142c <TM_SPIx_Init>
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <TM_SPI_Init+0xdc>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d10a      	bne.n	80012d4 <TM_SPI_Init+0xc0>
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
 80012be:	78f9      	ldrb	r1, [r7, #3]
 80012c0:	2300      	movs	r3, #0
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2320      	movs	r3, #32
 80012cc:	2200      	movs	r2, #0
 80012ce:	4808      	ldr	r0, [pc, #32]	; (80012f0 <TM_SPI_Init+0xdc>)
 80012d0:	f000 f8ac 	bl	800142c <TM_SPIx_Init>
	}
#endif
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40013000 	.word	0x40013000
 80012e0:	40003800 	.word	0x40003800
 80012e4:	40003c00 	.word	0x40003c00
 80012e8:	40013400 	.word	0x40013400
 80012ec:	40015000 	.word	0x40015000
 80012f0:	40015400 	.word	0x40015400

080012f4 <TM_SPI_WriteMulti>:
		/* Read data register */
		dataIn[i] = SPIx->DR;
	}
}

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
	uint32_t i;	
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	b29b      	uxth	r3, r3
 8001306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130a:	2b00      	cmp	r3, #0
 800130c:	d031      	beq.n	8001372 <TM_SPI_WriteMulti+0x7e>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 800130e:	bf00      	nop
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	891b      	ldrh	r3, [r3, #8]
 8001314:	b29b      	uxth	r3, r3
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f8      	beq.n	8001310 <TM_SPI_WriteMulti+0x1c>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	891b      	ldrh	r3, [r3, #8]
 8001322:	b29b      	uxth	r3, r3
 8001324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f1      	bne.n	8001310 <TM_SPI_WriteMulti+0x1c>
	
	for (i = 0; i < count; i++) {
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e01a      	b.n	8001368 <TM_SPI_WriteMulti+0x74>
		/* Fill output buffer with data */
		SPIx->DR = dataOut[i];
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b29a      	uxth	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 8001340:	bf00      	nop
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	891b      	ldrh	r3, [r3, #8]
 8001346:	b29b      	uxth	r3, r3
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f8      	beq.n	8001342 <TM_SPI_WriteMulti+0x4e>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	891b      	ldrh	r3, [r3, #8]
 8001354:	b29b      	uxth	r3, r3
 8001356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f1      	bne.n	8001342 <TM_SPI_WriteMulti+0x4e>
		
		/* Read data register */
		(void)SPIx->DR;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	899b      	ldrh	r3, [r3, #12]
	for (i = 0; i < count; i++) {
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	d3e0      	bcc.n	8001332 <TM_SPI_WriteMulti+0x3e>
 8001370:	e000      	b.n	8001374 <TM_SPI_WriteMulti+0x80>
	SPI_CHECK_ENABLED(SPIx);
 8001372:	bf00      	nop
	}
}
 8001374:	371c      	adds	r7, #28
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <TM_SPI_ReadMulti>:

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
 800137e:	b480      	push	{r7}
 8001380:	b087      	sub	sp, #28
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	4613      	mov	r3, r2
 800138c:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001398:	2b00      	cmp	r3, #0
 800139a:	d034      	beq.n	8001406 <TM_SPI_ReadMulti+0x88>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 800139c:	bf00      	nop
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	891b      	ldrh	r3, [r3, #8]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f8      	beq.n	800139e <TM_SPI_ReadMulti+0x20>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	891b      	ldrh	r3, [r3, #8]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f1      	bne.n	800139e <TM_SPI_ReadMulti+0x20>
	
	for (i = 0; i < count; i++) {
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	e01d      	b.n	80013fc <TM_SPI_ReadMulti+0x7e>
		/* Fill output buffer with data */
		SPIx->DR = dummy;
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	819a      	strh	r2, [r3, #12]
		
		/* Wait for SPI to end everything */
		SPI_WAIT(SPIx);
 80013c8:	bf00      	nop
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	891b      	ldrh	r3, [r3, #8]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f8      	beq.n	80013ca <TM_SPI_ReadMulti+0x4c>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	891b      	ldrh	r3, [r3, #8]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f1      	bne.n	80013ca <TM_SPI_ReadMulti+0x4c>
		
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	4413      	add	r3, r2
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	8992      	ldrh	r2, [r2, #12]
 80013f0:	b292      	uxth	r2, r2
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; i++) {
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d3dd      	bcc.n	80013c0 <TM_SPI_ReadMulti+0x42>
 8001404:	e000      	b.n	8001408 <TM_SPI_ReadMulti+0x8a>
	SPI_CHECK_ENABLED(SPIx);
 8001406:	bf00      	nop
	}
}
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) {
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	460b      	mov	r3, r1
 800141c:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	4608      	mov	r0, r1
 8001436:	4611      	mov	r1, r2
 8001438:	461a      	mov	r2, r3
 800143a:	4603      	mov	r3, r0
 800143c:	70fb      	strb	r3, [r7, #3]
 800143e:	460b      	mov	r3, r1
 8001440:	70bb      	strb	r3, [r7, #2]
 8001442:	4613      	mov	r3, r2
 8001444:	803b      	strh	r3, [r7, #0]
	SPI_InitTypeDef SPI_InitStruct;

	/* Set default settings */
	SPI_StructInit(&SPI_InitStruct);
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4618      	mov	r0, r3
 800144c:	f7fe ffae 	bl	80003ac <SPI_StructInit>
#ifdef USE_SPI1	
	if (SPIx == SPI1) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a51      	ldr	r2, [pc, #324]	; (8001598 <TM_SPIx_Init+0x16c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d10b      	bne.n	8001470 <TM_SPIx_Init+0x44>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001458:	4a50      	ldr	r2, [pc, #320]	; (800159c <TM_SPIx_Init+0x170>)
 800145a:	4b50      	ldr	r3, [pc, #320]	; (800159c <TM_SPIx_Init+0x170>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001462:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f8a4 	bl	80015b4 <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI1_DATASIZE;
 800146c:	2300      	movs	r3, #0
 800146e:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a4b      	ldr	r2, [pc, #300]	; (80015a0 <TM_SPIx_Init+0x174>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d10b      	bne.n	8001490 <TM_SPIx_Init+0x64>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001478:	4a48      	ldr	r2, [pc, #288]	; (800159c <TM_SPIx_Init+0x170>)
 800147a:	4b48      	ldr	r3, [pc, #288]	; (800159c <TM_SPIx_Init+0x170>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001482:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f8c4 	bl	8001614 <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI2_DATASIZE;
 800148c:	2300      	movs	r3, #0
 800148e:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a44      	ldr	r2, [pc, #272]	; (80015a4 <TM_SPIx_Init+0x178>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d10b      	bne.n	80014b0 <TM_SPIx_Init+0x84>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8001498:	4a40      	ldr	r2, [pc, #256]	; (800159c <TM_SPIx_Init+0x170>)
 800149a:	4b40      	ldr	r3, [pc, #256]	; (800159c <TM_SPIx_Init+0x170>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a2:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f900 	bl	80016ac <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI3_DATASIZE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	823b      	strh	r3, [r7, #16]
	
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a3d      	ldr	r2, [pc, #244]	; (80015a8 <TM_SPIx_Init+0x17c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d10b      	bne.n	80014d0 <TM_SPIx_Init+0xa4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 80014b8:	4a38      	ldr	r2, [pc, #224]	; (800159c <TM_SPIx_Init+0x170>)
 80014ba:	4b38      	ldr	r3, [pc, #224]	; (800159c <TM_SPIx_Init+0x170>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014c2:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI4_INT_InitPins(pinspack);
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f922 	bl	8001710 <TM_SPI4_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI4_DATASIZE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a36      	ldr	r2, [pc, #216]	; (80015ac <TM_SPIx_Init+0x180>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d10b      	bne.n	80014f0 <TM_SPIx_Init+0xc4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI5EN;
 80014d8:	4a30      	ldr	r2, [pc, #192]	; (800159c <TM_SPIx_Init+0x170>)
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <TM_SPIx_Init+0x170>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014e2:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI5_INT_InitPins(pinspack);
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f942 	bl	8001770 <TM_SPI5_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI5_DATASIZE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	823b      	strh	r3, [r7, #16]
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a2f      	ldr	r2, [pc, #188]	; (80015b0 <TM_SPIx_Init+0x184>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d10b      	bne.n	8001510 <TM_SPIx_Init+0xe4>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI6EN;
 80014f8:	4a28      	ldr	r2, [pc, #160]	; (800159c <TM_SPIx_Init+0x170>)
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <TM_SPIx_Init+0x170>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001502:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI6_INT_InitPins(pinspack);
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f96e 	bl	80017e8 <TM_SPI6_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI6_DATASIZE;
 800150c:	2300      	movs	r3, #0
 800150e:	823b      	strh	r3, [r7, #16]
	}
#endif

	/* Fill SPI settings */
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler;
 8001510:	883b      	ldrh	r3, [r7, #0]
 8001512:	833b      	strh	r3, [r7, #24]
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001514:	2300      	movs	r3, #0
 8001516:	81bb      	strh	r3, [r7, #12]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit;
 8001518:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800151a:	837b      	strh	r3, [r7, #26]
	SPI_InitStruct.SPI_Mode = SPI_MasterSlave;
 800151c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800151e:	81fb      	strh	r3, [r7, #14]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8001520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001524:	82fb      	strh	r3, [r7, #22]
	//SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 8001526:	78bb      	ldrb	r3, [r7, #2]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d104      	bne.n	8001536 <TM_SPIx_Init+0x10a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 800152c:	2300      	movs	r3, #0
 800152e:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8001530:	2300      	movs	r3, #0
 8001532:	82bb      	strh	r3, [r7, #20]
 8001534:	e016      	b.n	8001564 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 8001536:	78bb      	ldrb	r3, [r7, #2]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d104      	bne.n	8001546 <TM_SPIx_Init+0x11a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 800153c:	2300      	movs	r3, #0
 800153e:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8001540:	2301      	movs	r3, #1
 8001542:	82bb      	strh	r3, [r7, #20]
 8001544:	e00e      	b.n	8001564 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 8001546:	78bb      	ldrb	r3, [r7, #2]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d104      	bne.n	8001556 <TM_SPIx_Init+0x12a>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 800154c:	2302      	movs	r3, #2
 800154e:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8001550:	2300      	movs	r3, #0
 8001552:	82bb      	strh	r3, [r7, #20]
 8001554:	e006      	b.n	8001564 <TM_SPIx_Init+0x138>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 8001556:	78bb      	ldrb	r3, [r7, #2]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d103      	bne.n	8001564 <TM_SPIx_Init+0x138>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 800155c:	2302      	movs	r3, #2
 800155e:	827b      	strh	r3, [r7, #18]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8001560:	2301      	movs	r3, #1
 8001562:	82bb      	strh	r3, [r7, #20]
	}
	
	/* Disable first */
	SPIx->CR1 &= ~SPI_CR1_SPE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	b29b      	uxth	r3, r3
 800156a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	801a      	strh	r2, [r3, #0]
	
	/* Init SPI */
	SPI_Init(SPIx, &SPI_InitStruct);
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	4619      	mov	r1, r3
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7fe fed2 	bl	8000324 <SPI_Init>
	
	/* Enable SPI */
	SPIx->CR1 |= SPI_CR1_SPE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	b29b      	uxth	r3, r3
 8001586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800158a:	b29a      	uxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	801a      	strh	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40013000 	.word	0x40013000
 800159c:	40023800 	.word	0x40023800
 80015a0:	40003800 	.word	0x40003800
 80015a4:	40003c00 	.word	0x40003c00
 80015a8:	40013400 	.word	0x40013400
 80015ac:	40015000 	.word	0x40015000
 80015b0:	40015400 	.word	0x40015400

080015b4 <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef USE_SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d109      	bne.n	80015d8 <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 80015c4:	2305      	movs	r3, #5
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	2303      	movs	r3, #3
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2300      	movs	r3, #0
 80015ce:	2200      	movs	r2, #0
 80015d0:	21e0      	movs	r1, #224	; 0xe0
 80015d2:	480d      	ldr	r0, [pc, #52]	; (8001608 <TM_SPI1_INT_InitPins+0x54>)
 80015d4:	f7ff f9d7 	bl	8000986 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d109      	bne.n	80015f2 <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 80015de:	2305      	movs	r3, #5
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	2303      	movs	r3, #3
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2300      	movs	r3, #0
 80015e8:	2200      	movs	r2, #0
 80015ea:	2138      	movs	r1, #56	; 0x38
 80015ec:	4807      	ldr	r0, [pc, #28]	; (800160c <TM_SPI1_INT_InitPins+0x58>)
 80015ee:	f7ff f9ca 	bl	8000986 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d103      	bne.n	8001600 <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AF_SPI1);
 80015f8:	2105      	movs	r1, #5
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <TM_SPI1_INT_InitPins+0x5c>)
 80015fc:	f7ff ff09 	bl	8001412 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40020000 	.word	0x40020000
 800160c:	40020400 	.word	0x40020400
 8001610:	40013000 	.word	0x40013000

08001614 <TM_SPI2_INT_InitPins>:
#endif

#ifdef USE_SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af02      	add	r7, sp, #8
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d114      	bne.n	800164e <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001624:	2305      	movs	r3, #5
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	2303      	movs	r3, #3
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2300      	movs	r3, #0
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001634:	4819      	ldr	r0, [pc, #100]	; (800169c <TM_SPI2_INT_InitPins+0x88>)
 8001636:	f7ff f9a6 	bl	8000986 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 800163a:	2305      	movs	r3, #5
 800163c:	9301      	str	r3, [sp, #4]
 800163e:	2303      	movs	r3, #3
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2300      	movs	r3, #0
 8001644:	2200      	movs	r2, #0
 8001646:	210c      	movs	r1, #12
 8001648:	4815      	ldr	r0, [pc, #84]	; (80016a0 <TM_SPI2_INT_InitPins+0x8c>)
 800164a:	f7ff f99c 	bl	8000986 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d10a      	bne.n	800166a <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001654:	2305      	movs	r3, #5
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	2303      	movs	r3, #3
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2300      	movs	r3, #0
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001664:	480d      	ldr	r0, [pc, #52]	; (800169c <TM_SPI2_INT_InitPins+0x88>)
 8001666:	f7ff f98e 	bl	8000986 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d109      	bne.n	8001684 <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001670:	2305      	movs	r3, #5
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	2303      	movs	r3, #3
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2300      	movs	r3, #0
 800167a:	2200      	movs	r2, #0
 800167c:	210d      	movs	r1, #13
 800167e:	4809      	ldr	r0, [pc, #36]	; (80016a4 <TM_SPI2_INT_InitPins+0x90>)
 8001680:	f7ff f981 	bl	8000986 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b03      	cmp	r3, #3
 8001688:	d103      	bne.n	8001692 <TM_SPI2_INT_InitPins+0x7e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AF_SPI2);
 800168a:	2105      	movs	r1, #5
 800168c:	4806      	ldr	r0, [pc, #24]	; (80016a8 <TM_SPI2_INT_InitPins+0x94>)
 800168e:	f7ff fec0 	bl	8001412 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40020400 	.word	0x40020400
 80016a0:	40020800 	.word	0x40020800
 80016a4:	40022000 	.word	0x40022000
 80016a8:	40003800 	.word	0x40003800

080016ac <TM_SPI3_INT_InitPins>:
#endif

#ifdef USE_SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d109      	bne.n	80016d0 <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 80016bc:	2306      	movs	r3, #6
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	2303      	movs	r3, #3
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2300      	movs	r3, #0
 80016c6:	2200      	movs	r2, #0
 80016c8:	2138      	movs	r1, #56	; 0x38
 80016ca:	480e      	ldr	r0, [pc, #56]	; (8001704 <TM_SPI3_INT_InitPins+0x58>)
 80016cc:	f7ff f95b 	bl	8000986 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d10a      	bne.n	80016ec <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 80016d6:	2306      	movs	r3, #6
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	2303      	movs	r3, #3
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2300      	movs	r3, #0
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80016e6:	4808      	ldr	r0, [pc, #32]	; (8001708 <TM_SPI3_INT_InitPins+0x5c>)
 80016e8:	f7ff f94d 	bl	8000986 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d103      	bne.n	80016fa <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AF_SPI3);
 80016f2:	2106      	movs	r1, #6
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <TM_SPI3_INT_InitPins+0x60>)
 80016f6:	f7ff fe8c 	bl	8001412 <TM_SPI_InitCustomPinsCallback>
	}
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40020400 	.word	0x40020400
 8001708:	40020800 	.word	0x40020800
 800170c:	40003c00 	.word	0x40003c00

08001710 <TM_SPI4_INT_InitPins>:
#endif

#ifdef USE_SPI4
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af02      	add	r7, sp, #8
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_1) {
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d109      	bne.n	8001734 <TM_SPI4_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 8001720:	2305      	movs	r3, #5
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	2303      	movs	r3, #3
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2300      	movs	r3, #0
 800172a:	2200      	movs	r2, #0
 800172c:	2164      	movs	r1, #100	; 0x64
 800172e:	480e      	ldr	r0, [pc, #56]	; (8001768 <TM_SPI4_INT_InitPins+0x58>)
 8001730:	f7ff f929 	bl	8000986 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d10a      	bne.n	8001750 <TM_SPI4_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 800173a:	2305      	movs	r3, #5
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	2303      	movs	r3, #3
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2300      	movs	r3, #0
 8001744:	2200      	movs	r2, #0
 8001746:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800174a:	4807      	ldr	r0, [pc, #28]	; (8001768 <TM_SPI4_INT_InitPins+0x58>)
 800174c:	f7ff f91b 	bl	8000986 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b03      	cmp	r3, #3
 8001754:	d103      	bne.n	800175e <TM_SPI4_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI4, GPIO_AF_SPI4);
 8001756:	2105      	movs	r1, #5
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <TM_SPI4_INT_InitPins+0x5c>)
 800175a:	f7ff fe5a 	bl	8001412 <TM_SPI_InitCustomPinsCallback>
	}
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	40013400 	.word	0x40013400

08001770 <TM_SPI5_INT_InitPins>:
#endif

#ifdef USE_SPI5
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af02      	add	r7, sp, #8
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOF)
	if (pinspack == TM_SPI_PinsPack_1) {
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10a      	bne.n	8001796 <TM_SPI5_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8001780:	2305      	movs	r3, #5
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	2303      	movs	r3, #3
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2300      	movs	r3, #0
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001790:	4812      	ldr	r0, [pc, #72]	; (80017dc <TM_SPI5_INT_InitPins+0x6c>)
 8001792:	f7ff f8f8 	bl	8000986 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF) && defined(GPIOH)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d114      	bne.n	80017c6 <TM_SPI5_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 800179c:	2305      	movs	r3, #5
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	2303      	movs	r3, #3
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2300      	movs	r3, #0
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ac:	480b      	ldr	r0, [pc, #44]	; (80017dc <TM_SPI5_INT_InitPins+0x6c>)
 80017ae:	f7ff f8ea 	bl	8000986 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 80017b2:	2305      	movs	r3, #5
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	2303      	movs	r3, #3
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2300      	movs	r3, #0
 80017bc:	2200      	movs	r2, #0
 80017be:	21c0      	movs	r1, #192	; 0xc0
 80017c0:	4807      	ldr	r0, [pc, #28]	; (80017e0 <TM_SPI5_INT_InitPins+0x70>)
 80017c2:	f7ff f8e0 	bl	8000986 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d103      	bne.n	80017d4 <TM_SPI5_INT_InitPins+0x64>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI5, GPIO_AF_SPI5);
 80017cc:	2105      	movs	r1, #5
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <TM_SPI5_INT_InitPins+0x74>)
 80017d0:	f7ff fe1f 	bl	8001412 <TM_SPI_InitCustomPinsCallback>
	}
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021400 	.word	0x40021400
 80017e0:	40021c00 	.word	0x40021c00
 80017e4:	40015000 	.word	0x40015000

080017e8 <TM_SPI6_INT_InitPins>:
#endif

#ifdef USE_SPI6
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
#if defined(GPIOG)
	if (pinspack == TM_SPI_PinsPack_1) {
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10a      	bne.n	800180e <TM_SPI6_INT_InitPins+0x26>
		/* Init SPI pins */
		TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI6);
 80017f8:	2305      	movs	r3, #5
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	2303      	movs	r3, #3
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2300      	movs	r3, #0
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001808:	4806      	ldr	r0, [pc, #24]	; (8001824 <TM_SPI6_INT_InitPins+0x3c>)
 800180a:	f7ff f8bc 	bl	8000986 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b03      	cmp	r3, #3
 8001812:	d103      	bne.n	800181c <TM_SPI6_INT_InitPins+0x34>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI6, GPIO_AF_SPI6);
 8001814:	2105      	movs	r1, #5
 8001816:	4804      	ldr	r0, [pc, #16]	; (8001828 <TM_SPI6_INT_InitPins+0x40>)
 8001818:	f7ff fdfb 	bl	8001412 <TM_SPI_InitCustomPinsCallback>
	}
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021800 	.word	0x40021800
 8001828:	40015400 	.word	0x40015400

0800182c <__libc_init_array>:
 800182c:	b570      	push	{r4, r5, r6, lr}
 800182e:	4e0d      	ldr	r6, [pc, #52]	; (8001864 <__libc_init_array+0x38>)
 8001830:	4c0d      	ldr	r4, [pc, #52]	; (8001868 <__libc_init_array+0x3c>)
 8001832:	1ba4      	subs	r4, r4, r6
 8001834:	10a4      	asrs	r4, r4, #2
 8001836:	2500      	movs	r5, #0
 8001838:	42a5      	cmp	r5, r4
 800183a:	d109      	bne.n	8001850 <__libc_init_array+0x24>
 800183c:	4e0b      	ldr	r6, [pc, #44]	; (800186c <__libc_init_array+0x40>)
 800183e:	4c0c      	ldr	r4, [pc, #48]	; (8001870 <__libc_init_array+0x44>)
 8001840:	f000 f818 	bl	8001874 <_init>
 8001844:	1ba4      	subs	r4, r4, r6
 8001846:	10a4      	asrs	r4, r4, #2
 8001848:	2500      	movs	r5, #0
 800184a:	42a5      	cmp	r5, r4
 800184c:	d105      	bne.n	800185a <__libc_init_array+0x2e>
 800184e:	bd70      	pop	{r4, r5, r6, pc}
 8001850:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001854:	4798      	blx	r3
 8001856:	3501      	adds	r5, #1
 8001858:	e7ee      	b.n	8001838 <__libc_init_array+0xc>
 800185a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800185e:	4798      	blx	r3
 8001860:	3501      	adds	r5, #1
 8001862:	e7f2      	b.n	800184a <__libc_init_array+0x1e>
 8001864:	0800188c 	.word	0x0800188c
 8001868:	0800188c 	.word	0x0800188c
 800186c:	0800188c 	.word	0x0800188c
 8001870:	08001890 	.word	0x08001890

08001874 <_init>:
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001876:	bf00      	nop
 8001878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800187a:	bc08      	pop	{r3}
 800187c:	469e      	mov	lr, r3
 800187e:	4770      	bx	lr

08001880 <_fini>:
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	bf00      	nop
 8001884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001886:	bc08      	pop	{r3}
 8001888:	469e      	mov	lr, r3
 800188a:	4770      	bx	lr
